let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString);
console.log(result); //true

let petString = "James has a pet cat.";
let petRegex = /cat|dog|bird|fish/; //match any of these
let result = petRegex.test(petString); // true

let myString = "freeCodeCamp";
let fccRegex = /freecodecamp/i; //ignore the case of letters
let result = fccRegex.test(myString); //true

let extractStr = "Extract the word 'coding' from this string.";
let codingRegex = /coding/;
let result = extractStr.match(codingRegex); //returns coding

let twinkleStar = "Twinkle, twinkle, little star";
let starRegex = /twinkle/ig; // add g flag to extract more matches
let result = twinkleStar.match(starRegex); 
//Returns ["Twinkle", "twinkle"]

let exampleStr = "Let's have fun with regular expressions!";
let unRegex = /un./; 
//matches strings like "fun", "pun", "nun", and "bun"
let result = unRegex.test(exampleStr);

let bigStr = "big";
let bagStr = "bag";
let bugStr = "bug";
let bogStr = "bog";
let bgRegex = /b[aiu]g/;
bigStr.match(bgRegex); // Returns ["big"]
bagStr.match(bgRegex); // Returns ["bag"]
bugStr.match(bgRegex); // Returns ["bug"]
bogStr.match(bgRegex); // Returns null

let catStr = "cat";
let batStr = "bat";
let matStr = "mat";
let bgRegex = /[a-e]at/;
catStr.match(bgRegex); // Returns ["cat"]
batStr.match(bgRegex); // Returns ["bat"]
matStr.match(bgRegex); // Returns null

let jennyStr = "Jenny8675309";
let myRegex = /[a-z0-9]/ig;
// matches all letters and numbers in jennyStr
jennyStr.match(myRegex);

let quoteSample = "3 blind mice.";
let myRegex = /[^aeiou0-9]/ig; 
//match characters that are not numbers and vowels
let result = quoteSample.match(myRegex);

let difficultSpelling = "Mississippi";
let myRegex = /s+/ig; // gets 
let result = difficultSpelling.match(myRegex); // result = ["ss", "ss"]

let soccerWord = "gooooooooal!";
let gPhrase = "gut feeling";
let oPhrase = "over the moon";
let goRegex = /go*/; // test if 'o' occurs 0 or more times
soccerWord.match(goRegex); // Returns ["goooooooo"]
gPhrase.match(goRegex); // Returns ["g"]
oPhrase.match(goRegex); // Returns null

let text = "<h1>Winter is coming</h1>";
let myRegex = /<.*?>/;
let result = text.match(myRegex);
// code above will match "<h1>" 
// instead of "<h1>Winter is coming</h1>"
// it will get the shortest match with the ? character

let firstString = "Ricky is first and can be found.";
let firstRegex = /^Ricky/; //Ricky at the beginning
firstRegex.test(firstString);
// Returns true
let notFirst = "You can't find Ricky now.";
firstRegex.test(notFirst);
// Returns false

let theEnding = "This is a never ending story";
let storyRegex = /story$/;//story at the end
storyRegex.test(theEnding);
// Returns true
let noEnding = "Sometimes a story will have to end";
storyRegex.test(noEnding);
// Returns false

let longHand = /[A-Za-z0-9_]+/;
let shortHand = /\w+/;//shortcut for regexp above
let numbers = "42";
let varNames = "important_var";
longHand.test(numbers); // Returns true
shortHand.test(numbers); // Returns true
longHand.test(varNames); // Returns true
shortHand.test(varNames); // Returns true

let shortHand = /\W/;//match non alphanumeric character
let numbers = "42%";
let sentence = "Coding!";
numbers.match(shortHand); // Returns ["%"]
sentence.match(shortHand); // Returns ["!"]

let movieName = "2001: A Space Odyssey";
let numRegex = /\d/g; //match digits
let result = movieName.match(numRegex).length;
// the "movieName.match(numRegex)" returns an
// array so you can use .length property
console.log(result); // 4 

let movieName = "2001: A Space Odyssey";
let noNumRegex = /\D/g; //not a digit
let result = movieName.match(noNumRegex).length;

let A4 = "aaaah";
let A2 = "aah";
let multipleA = /a{3,5}h/; a must be repeated 3-5 times
multipleA.test(A4); // Returns true
multipleA.test(A2); // Returns false

Specify Exact Number of Matches
let A4 = "haaaah";
let A3 = "haaah";
let A100 = "h" + "a".repeat(100) + "h";
let multipleHA = /ha{3}h/; //Specify Exact Number of Matches
multipleHA.test(A4); // Returns false
multipleHA.test(A3); // Returns true
multipleHA.test(A100); // Returns false

let american = "color";
let british = "colour";
let rainbowRegex= /colou?r/;
rainbowRegex.test(american); // Returns true
rainbowRegex.test(british); // Returns true

A positive lookahead will look to make sure the element in the
search pattern is there, but won't actually match it. A positive
lookahead is used as (?=...) where the ... is the required part
that is not matched. On the other hand, a negative lookahead will
look to make sure the element in the search pattern is not there.
A negative lookahead is used as (?!...) where the ... is the
pattern that you do not want to be there. The rest of the pattern
is returned if the negative lookahead part is not present.
let quit = "qu";
let noquit = "qt";
let quRegex= /q(?=u)/;
let qRegex = /q(?!u)/;
quit.match(quRegex); // Returns ["q"]
noquit.match(qRegex); // Returns ["q"]

let testStr = "Pumpkin";
let testRegex = /P(engu|umpk)in/;
testRegex.test(testStr);
// Returns true

let american = "color";
let british = "colour";
let rainbowRegex= /colou?r/;
rainbowRegex.test(american); // Returns true
rainbowRegex.test(british); // Returns true

let repeatStr = "regex regex";
let repeatRegex = /(\w+)\s\1/; 
// the "\1" repeats the expression indide the ()
// if there are multiple groups of (), the \1 just increment by 1
repeatRegex.test(repeatStr); // Returns true
repeatStr.match(repeatRegex); // Returns ["regex regex", "regex"]
let repeatNum = "42 42 42";
let reRegex = /^(\d+)(\s)\1\2\1$/; //doesn't match "42 42 42 42"
let result = reRegex.test(repeatNum);

Use Capture Groups to Search and Replace
let wrongText = "The sky is silver.";
let silverRegex = /silver/;
wrongText.replace(silverRegex, "blue");
// Returns "The sky is blue."
    You can also access capture groups in the 
    replacement string with dollar signs ($).
"Code Camp".replace(/(\w+)\s(\w+)/, '$2 $1'); 
// the whole expression will be replaced with "Camp Code"

// Your regex should match JACK
// Your regex should not match J
// Your regex should match Jo
// Your regex should match Oceans11
// Your regex should match RegexGuru
// Your regex should not match 007
// Your regex should not match 9
// Your regex should not match A1
// Your regex should not match BadUs3rnam3
// Your regex should match Z97
// Your regex should not match c57bT3
// ^ - start of input
// [a-z] - first character is a letter
// [0-9][0-9]+ - ends with two or more numbers
// | - or
// [a-z]+ - has one or more letters next
// \d* - and ends with zero or more numbers
// $ - end of input
// i - ignore case of input
let username = "JackOfAllTrades";
let userCheck = /^[a-z]([0-9][0-9]+|[a-z]+\d*)$/i; //correct
let result = userCheck.test(username);
