erros{
    syntax error
    runtime error - runtime errors when code fails to 
    execute or has unexpected behavior
    semantic error - code does not run as intended
}

*use console.log(); 

*Use typeof to Check the Type of a Variable
You can use typeof to check the data structure,
or type, of a variable. This is useful in debugging
when working with multiple data types. If you think
you're adding two numbers, but one is actually a
string, the results can be unexpected. Type errors 
can lurk in calculations or function calls. Be
careful especially when you're accessing and 
working with external datain the form of a JavaScript
 Object Notation (JSON) object.Here are some examples
 using typeof: console.log(typeof ""); // outputs "string"
console.log(typeof 0); // outputs "number"
console.log(typeof []); // outputs "object"
console.log(typeof {}); // outputs "object"
JavaScript recognizes six primitive (immutable)
data types: Boolean, Null, Undefined, Number,
String, and Symbol (new with ES6) and one type 
for mutable items: Object. Note that in JavaScript,
arrays are technically a type of object.

*Catch Misspelled Variable and Function Names
Not Passed

*Catch Unclosed Parentheses, Brackets, Braces and Quotes

*Catch Use of Assignment '=' Operator Instead of 
Equality '==' Operator

*Catch Arguments Passed in the Wrong Order When Calling a Function

*Catch Missing Open and Closing Parenthesis After a Function Call
function myFunction() {
  return "You rock!";
}
let varOne = myFunction; // set to equal a function
let varTwo = myFunction(); // set to equal the string "You rock!"

*Use Caution When Reinitializing Variables Inside a Loop
Fix the code so it returns a correct 3x2 array of zeroes,
which looks like [[0, 0], [0, 0], [0, 0]].
function zeroArray(m, n) {
  let newArray = [];
  let row = [];
  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      row.push(0);
    }
    newArray.push(row);
    row = [];// answer, add this code, this reinitialize row 
    // array back to null
  }
  return newArray;
}
let matrix = zeroArray(3, 2);
console.log(matrix);

*Catch Off By One Errors When Using Indexing
let alphabet = "abcdefghijklmnopqrstuvwxyz";
let len = alphabet.length;
for (let i = 0; i <= len; i++) {
  // loops one too many times at the end
  console.log(alphabet[i]);
}
for (let j = 1; j < len; j++) {
  // loops one too few times and misses the first 
  // character at index 0
  console.log(alphabet[j]);
}
for (let k = 0; k < len; k++) {
  // Goldilocks approves - this is just right
  console.log(alphabet[k]);
}

*Catch Mixed Usage of Single and Double QuotesPassed
// These are correct:
const grouchoContraction = "I've had a perfectly 
wonderful evening, but this wasn't it.";
const quoteInString = "Groucho Marx once said 
'Quote me as saying I was mis-quoted.'";
// This is incorrect:
const uhOhGroucho = 'I've had a perfectly wonderful 
evening, but this wasn't it.';
Of course, it is okay to use only one style 
of quotes. You can escape the quotes inside the string 
by using the backslash (\) escape character:
// Correct use of same quotes:
const allSameQuotes = 'I\'ve had a perfectly wonderful
evening, but this wasn\'t it.';
