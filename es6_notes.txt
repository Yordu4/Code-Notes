const - makes read-only variables (you can mutate object declared with const)
"let" works better with scope than "var"

Object.freeze(obj); - prevents re-assignment of values to object properties

() => {"value"} - an arrow function (it will return value by default)
const myFunc = () => {
  const myVar = "value";
  return myVar;
}
const myFunc = () => "value";
const doubler = (item) => item * 2;
const doubler = item => item * 2;
const multiplier = (item, multi) => item * multi; 

const greeting = (name = "Anonymous") => "Hello " + name; 
//default value can be string or non string
console.log(greeting("John")); // Hello John
console.log(greeting()); // Hello Anonymous

function howMany(...args) { // ... syntax declares rest parameter
  return "You have passed " + args.length + " arguments.";
}
console.log(howMany(0, 1, 2)); // You have passed 3 arguments.
console.log(howMany("string", null, [1, 2, 3], { })); // You have passed 4 arguments.
The rest parameter eliminates the need to check the args array and allows us to apply map(), filter() and reduce() on the parameters array.

Copy an Array with the Spread Operator
const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;
arr2 = [...arr1];  // Change this line
console.log(arr2); // [ 'JAN', 'FEB', 'MAR', 'APR', 'MAY' ]

const arr = [6, 89, 3, 45];
const maximus = Math.max(...arr); // returns 89
Math.max expects comma seperated values, therefore passing arr wont work and will just return NaN, but ...arr evatualtes to 6, 89, 3, 45 not [6, 89, 3, 45] so Math.max accepts it. 
var maximus = Math.max.apply(null, arr); // returns 89

function copyMachine(arr, num) {
  let newArr = [];
  while (num >= 1) {
    newArr.push([...arr]);
    num--;
  }
  return newArr;
}
console.log(copyMachine([true, false, true], 2));
// returns [ [ true, false, true ], [ true, false, true ] ]

Combine Arrays with the Spread Operator
let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];
let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];
// thatArray now equals 
// ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']

const user = { name: 'John Doe', age: 34 };
const name = user.name; // name = 'John Doe'
const age = user.age; // age = 34
  Here's an equivalent assignment statement using the ES6 destructuring syntax:
const { name, age } = user; // name = 'John Doe', age = 34
  Here's how you can give new variable names in the assignment:
const { name: userName, age: userAge } = user;// userName = 'John Doe', userAge = 34

const user = {
  johnDoe: { 
    age: 34,
    email: 'johnDoe@freeCodeCamp.com'
  }
};
  Here's how to extract the values of object properties and assign them to variables with the same name:
const { johnDoe: { age, email }} = user;
  And here's how you can assign an object properties' values to variables with different names:
const { johnDoe: { age: userAge, email: userEmail }} = user;

let a = 8, b = 6;
[a,b]=[b,a]; //swaps their values
const [a, b] = [1, 2, 3, 4, 5, 6];
console.log(a, b); // 1, 2
const [a, b,,,c] = [1, 2, 3, 4, 5, 6];
console.log(a, b, c); // 1, 2, 5

const profileUpdate = (profileData) => {
  const { name, age, nationality, location } = profileData;
  // do something with these variables
}
  This effectively destructures the object sent into the function. This can also be done in-place:
const profileUpdate = ({ name, age, nationality, location }) => {
  /* do something with these fields */
}
const stats = {
  max: 56.78,
  standard_deviation: 4.34,
  median: 34.54,
  mode: 23.87,
  min: -0.75,
  average: 35.85
};
const half = ({min,max}) => (max + min) / 2.0;  //28.015

const person = {
  name: "Zodiac Hasbro",
  age: 56
};
// Template literal with multi-line and string interpolation
const greeting = `Hello, my name is ${person.name}!
I am ${person.age} years old.`;
console.log(greeting); // prints
// Hello, my name is Zodiac Hasbro!
// I am 56 years old.
// you can do operators inside ${}

const getMousePosition = (x, y) => ({
  x: x,
  y: y
});
  getMousePosition is a simple function that returns an object containing two properties. ES6 provides the syntactic sugar to eliminate the redundancy of having to write x: x. You can simply write x once, and it will be converted tox: x (or something equivalent) under the hood. Here is the same function from above rewritten to use this new syntax:
const getMousePosition = (x, y) => ({ x, y });

const person = {
  name: "Taylor",
  sayHello: function() {
    return `Hello! My name is ${this.name}.`;
  }
};
  With ES6, You can remove the function keyword and colon altogether when defining functions in objects. Here's an example of this syntax:
const person = {
  name: "Taylor",
  sayHello() {
    return `Hello! My name is ${this.name}.`;
  }
};

var SpaceShuttle = function(targetPlanet){
  this.targetPlanet = targetPlanet;
}
var zeus = new SpaceShuttle('Jupiter');
  The class syntax simply replaces the constructor function creation:
class SpaceShuttle {
  constructor(targetPlanet) {
    this.targetPlanet = targetPlanet;
  }
}
const zeus = new SpaceShuttle('Jupiter');

class Vegetable {
  constructor(vege){
    this.name=vege;
  }
}
const carrot = new Vegetable('carrot');
console.log(carrot.name); // Should display 'carrot'

class Thermostat{// setter and getter demo
  constructor(temps){
    this.temp=temps;
  }
  get temperature (){
    return 5/9 * (this.temp - 32);
  }
  set temperature(newTemp){
    this.temp=newTemp;
  } 
}
const thermos = new Thermostat(76); // Setting in Fahrenheit scale
let temp = thermos.temperature; // 24.44 in Celsius
thermos.temperature = 26;
temp = thermos.temperature; // 26 in Celsius

  In order to make JavaScript more modular, clean, and maintainable; ES6 introduced a way to easily share code among JavaScript files. This involves exporting parts of a file for use in one or more other files, and importing the parts you need, where you need them. In order to take advantage of this functionality, you need to create a script in your HTML document with a type of module. Here’s an example:
<script type="module" src="filename.js"></script>
  A script that uses this module type can now use the import and export features you will learn about in the upcoming challenges.

export const add = (x, y) => {
  return x + y;
}
The above is a common way to export a single function, but you can achieve the same thing like this:
const add = (x, y) => {
  return x + y;
}
export { add };
export { add, subtract };// export multiple functions

import { add, subtract } from './math_functions.js';
// the ./ means look file in the same folder where the current file is
// the .js extentions must be included

import * as myMathModule from "./math_functions.js";
  The above import statement will create an object called myMathModule. This is just a variable name, you can name it anything. The object will contain all of the exports from math_functions.js in it, so you can access the functions like you would any other object property like the following:
myMathModule.add(2,3);
myMathModule.subtract(5,3);

  There is another export syntax you need to know, known as export default. Usually you will use this syntax if only one value is being exported from a file. It is also used to create a fallback value for a file or module.
// named function
export default function add(x, y) {
  return x + y;
}
// anonymous function
export default function(x, y) {
  return x + y;
}
  Since export default is used to declare a fallback value for a module or file, you can only have one value be a default export in each module or file. Additionally, you cannot use export default with var, let, or const

  import a default export
import add from "./math_functions.js";
  The syntax differs in one key place. The imported value, add, is not surrounded by curly braces ({}). add here is simply a variable name for whatever the default export of the math_functions.js file is. You can use any name here when importing a default.

  a JavaScript PromisePassed
  A promise in JavaScript is exactly what it sounds like - you use it to make a promise to do something, usually asynchronously. When the task completes, you either fulfill your promise or fail to do so. Promise is a constructor function, so you need to use the new keyword to create one. It takes a function, as its argument, with two parameters - resolve and reject. These are methods used to determine the outcome of the promise. The syntax looks like this:
const myPromise = new Promise((resolve, reject) => {
});

  A promise has three states: pending, fulfilled, and rejected. The promise you created in the last challenge is forever stuck in the pending state because you did not add a way to complete the promise. The resolve and reject parameters given to the promise argument are used to do this. resolve is used when you want your promise to succeed, and reject is used when you want it to fail. These are methods that take an argument, as seen below.
const myPromise = new Promise((resolve, reject) => {
  if(condition here) {
    resolve("Promise was fulfilled");
  } else {
    reject("Promise was rejected");
  }
});
  The example above uses strings for the argument of these functions, but it can really be anything. Often, it might be an object, that you would use data from, to put on your website or elsewhere.

  Handle a Fulfilled Promise with thenPassed
  Promises are most useful when you have a process that takes an unknown amount of time in your code (i.e. something asynchronous), often a server request. When you make a server request it takes some amount of time, and after it completes you usually want to do something with the response from the server. This can be achieved by using the then method. The then method is executed immediately after your promise is fulfilled with resolve. Here’s an example:
myPromise.then(result => {
  // do something with the result.
});
  result comes from the argument given to the resolve method.

  Handle a Rejected Promise with catch
  catch is the method used when your promise has been rejected. It is executed immediately after a promise's reject method is called. Here’s the syntax:
myPromise.catch(error => {
  // do something with the error.
});
error is the argument passed in to the reject method.
Note: the then and catch methods can be chained to the promise declaration if you choose.

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to false to represent an unsuccessful response from a server
  let responseFromServer = false;
  if(responseFromServer) {
    resolve("We got the data");
  } else {  
    reject("Data not received");
  }
});
makeServerRequest.then(result => {
  console.log(result);
});
makeServerRequest.catch(error=> {
console.log(error);
});

