const - makes read-only variables (you can mutate object declared with const)
"let" works better with scope than "var"
Object.freeze(obj); - prevents re-assignment of values to properties

() => {"value"} - an arrow function (it will return value by default)
const myFunc = () => {
  const myVar = "value";
  return myVar;
}
const myFunc = () => "value";
const doubler = (item) => item * 2;
const doubler = item => item * 2;
const multiplier = (item, multi) => item * multi; 

const greeting = (name = "Anonymous") => "Hello " + name; default value can be string or non string
console.log(greeting("John")); // Hello John
console.log(greeting()); // Hello Anonymous

function howMany(...args) { // ... syntax declares rest parameter
  return "You have passed " + args.length + " arguments.";
}
console.log(howMany(0, 1, 2)); // You have passed 3 arguments.
console.log(howMany("string", null, [1, 2, 3], { })); // You have passed 4 arguments.
The rest parameter eliminates the need to check the args array and allows us to apply map(), filter() and reduce() on the parameters array.

const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;
arr2 = [...arr1];  // Change this line
console.log(arr2); //[ 'JAN', 'FEB', 'MAR', 'APR', 'MAY' ]

const user = { name: 'John Doe', age: 34 };
const name = user.name; // name = 'John Doe'
const age = user.age; // age = 34
  Here's an equivalent assignment statement using the ES6 destructuring syntax:
const { name, age } = user; // name = 'John Doe', age = 34
  Here's how you can give new variable names in the assignment:
const { name: userName, age: userAge } = user;// userName = 'John Doe', userAge = 34

const user = {
  johnDoe: { 
    age: 34,
    email: 'johnDoe@freeCodeCamp.com'
  }
};
  Here's how to extract the values of object properties and assign them to variables with the same name:
const { johnDoe: { age, email }} = user;
  And here's how you can assign an object properties' values to variables with different names:
const { johnDoe: { age: userAge, email: userEmail }} = user;